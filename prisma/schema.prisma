// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          Role           @default(USER)
  accountStatus AccountStatus  @default(ACTIVE)
  lastLogin     DateTime?
  country       String?
  favorites     UserFavorite[]
  cartItems     CartItem[]
  orders        Order[]
  activityLogs  ActivityLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  hasDiscount   Boolean        @default(false)
  discountPrice Float?
  quantity      Int
  images        String[]       @default([])
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  favorites     UserFavorite[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("products")
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("user_favorites")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)

  email           String
  phone           String
  firstName       String
  lastName        String
  address         String
  city            String
  postalCode      String
  country         String

  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)

  stripeSessionId       String?  @unique
  stripePaymentIntentId String?

  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float

  items           OrderItem[]
  logs            OrderLog[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  name            String
  price           Float
  quantity        Int
  image           String?

  createdAt       DateTime @default(now())

  @@map("order_items")
}

model OrderLog {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  action      String
  description String
  performedBy String?
  createdAt   DateTime @default(now())

  @@map("order_logs")
}

enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model ActivityLog {
  id          String       @id @default(cuid())
  userId      String?
  userName    String?
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      ActivityType
  description String
  ipAddress   String?
  userAgent   String?
  path        String?
  metadata    Json?
  createdAt   DateTime     @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

enum ActivityType {
  LOGIN
  LOGOUT
  REGISTER
  LOGIN_FAILED
  VIEW_PAGE
  VIEW_PRODUCT
  ADD_TO_CART
  REMOVE_FROM_CART
  UPDATE_CART
  CLEAR_CART
  ADD_TO_WISHLIST
  REMOVE_FROM_WISHLIST
  PLACE_ORDER
  UPDATE_PROFILE
  CHANGE_PASSWORD
  SEARCH
  FILTER_PRODUCTS
  CHECKOUT_STARTED
  CHECKOUT_COMPLETED
  CHECKOUT_CANCELLED
  ADMIN_ACTION
  OTHER
}